{"version":3,"sources":["common/TypographyCommon.tsx","card/CardUser.tsx","card/BackDropUserAndWrapCard.tsx","redux/persons-selectors.ts","card/CardGrid.tsx","redux/api.ts","redux/persons-reducer.ts","common/HeaderInput.tsx","header/Header.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["TypographyCommon","props","Typography","variant","color","component","text","value","useStyles","makeStyles","theme","createStyles","large","marginTop","width","spacing","height","CardUser","classes","Avatar","alt","src","className","gutterBottom","name","email","phone","root","rootBackDrop","insideCard","display","flexDirection","alignItems","insideCardBackDrop","backdrop","zIndex","drawer","BackDropUserAndWrapCard","React","useState","open","setOpen","handleToggle","Card","CardActionArea","onClick","Backdrop","gender","locationStreet","login","RootStoreSelector","state","flexGrow","flexWrap","justifyContent","emoji","CardGrid","useSelector","results","foundUsers","numberPeople","loading","style","fontSize","CircularProgress","size","Grid","container","length","map","el","item","first","picture","location","street","username","instance","axios","create","baseURL","usersAPI","quantity","get","then","res","data","setUsersTC","createAsyncThunk","thunkAPI","dispatch","setLoading","status","result","info","slice","createSlice","initialState","reducers","setFoundUsers","action","payload","dataSearch","toLowerCase","filter","setNumberPeople","number","extraReducers","builder","addCase","fulfilled","peopleReducer","reducer","actions","searchAndGroup","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginLeft","breakpoints","up","searchIconAndGroup","padding","pointerEvents","inputRoot","inputInput","paddingLeft","transition","transitions","InputSearchAndGroup","iconComponent","InputBase","placeholder","input","onChange","menuButton","marginRight","title","Header","useDispatch","AppBar","Toolbar","IconButton","edge","aria-label","noWrap","e","currentTarget","App","useEffect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","middleware","getDefaultMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bf236abb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Typography} from \"@material-ui/core\";\r\n\r\nexport const TypographyCommon = (props: TypographyCommonType) => {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n            {props.text}: {props.value}\r\n        </Typography>\r\n    )\r\n}\r\n// type\r\ntype TypographyCommonType = {\r\n    text: string\r\n    value: string\r\n}","import React from \"react\";\r\nimport {Avatar, Typography} from \"@material-ui/core\";\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\r\nimport {TypographyCommon} from \"../common/TypographyCommon\";\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        large: {\r\n            marginTop: '10px',\r\n            width: theme.spacing(15),\r\n            height: theme.spacing(15),\r\n        },\r\n    }),\r\n);\r\n\r\nexport const CardUser = (props: CardUserType) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <>\r\n            <Avatar alt=\"Remy Sharp\"\r\n                    src={props.src}\r\n                    className={classes.large}/>\r\n            <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                {props.name}\r\n            </Typography>\r\n            <TypographyCommon text={'email'} value={props.email}/>\r\n            <TypographyCommon text={'phone'} value={props.phone}/>\r\n        </>\r\n    );\r\n}\r\n\r\n// types\r\nexport type CardUserType = {\r\n    name: string\r\n    email: string\r\n    phone: string\r\n    src: string\r\n}","import React from \"react\";\r\nimport {Backdrop, Card, CardActionArea} from \"@material-ui/core\";\r\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport {CardUser} from \"./CardUser\";\r\nimport {TypographyCommon} from \"../common/TypographyCommon\";\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: 350,\r\n        },\r\n        rootBackDrop: {\r\n            width: 500,\r\n            height: 500,\r\n        },\r\n        insideCard: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n        },\r\n        insideCardBackDrop: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n            width: '100%',\r\n            height: '100%',\r\n        },\r\n        backdrop: {\r\n            zIndex: theme.zIndex.drawer + 1,\r\n            color: '#fff',\r\n        },\r\n    }),\r\n);\r\n\r\nexport const BackDropUserAndWrapCard = (props: BackDropUserAndWrapCardType) => {\r\n\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n\r\n    };\r\n    const handleToggle = () => {\r\n        setOpen(!open);\r\n    };\r\n    const classes = useStyles();\r\n    return (\r\n        <>\r\n            <Card className={classes.root}>\r\n                <CardActionArea className={classes.insideCard} onClick={handleToggle}>\r\n                    <CardUser email={props.email} name={props.name} phone={props.phone} src={props.src}/>\r\n                </CardActionArea>\r\n            </Card>\r\n            <Backdrop className={classes.backdrop} open={open} onClick={handleClose}>\r\n                <Card className={classes.rootBackDrop}>\r\n                    <CardActionArea className={classes.insideCardBackDrop} onClick={handleToggle}>\r\n                        <CardUser email={props.email} name={props.name} phone={props.phone} src={props.src}/>\r\n                        <TypographyCommon text={'gender'} value={props.gender}/>\r\n                        <TypographyCommon text={'street'} value={props.locationStreet}/>\r\n                        <TypographyCommon text={'login'} value={props.login}/>\r\n                    </CardActionArea>\r\n                </Card>\r\n            </Backdrop>\r\n        </>\r\n    )\r\n}\r\n//type\r\ntype BackDropUserAndWrapCardType = {\r\n    name: string\r\n    email: string\r\n    phone: string\r\n    src: string\r\n    locationStreet: string\r\n    gender: string\r\n    login: string\r\n}","import {RootStore} from \"./store\";\r\n\r\nexport const RootStoreSelector = (state: RootStore) => {\r\n    return state\r\n}\r\n\r\n","import React from 'react';\r\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport {useSelector} from \"react-redux\";\r\nimport {BackDropUserAndWrapCard} from \"./BackDropUserAndWrapCard\";\r\nimport {RootStoreSelector} from \"../redux/persons-selectors\";\r\nimport EmojiPeopleIcon from '@material-ui/icons/EmojiPeople';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1,\r\n            marginTop: '10px',\r\n            flexWrap: 'wrap',\r\n            justifyContent: 'center',\r\n            alignItems: 'center'\r\n        },\r\n        emoji: {\r\n            height: '100vh',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            justifyContent: 'center',\r\n            alignItems: 'center'\r\n\r\n        }\r\n    }),\r\n);\r\n\r\nexport function CardGrid() {\r\n\r\n    const classes = useStyles();\r\n    const {results, foundUsers, numberPeople, loading} = useSelector(RootStoreSelector)\r\n\r\n    if (numberPeople === 0) {\r\n        return (\r\n            <div className={classes.emoji}>\r\n                <div style={{fontSize: '24px'}}>Hello! It's me!</div>\r\n                <EmojiPeopleIcon style={{fontSize: 500}}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (loading) {\r\n        return (\r\n            <div className={classes.emoji}>\r\n                <CircularProgress size={200}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Grid container spacing={2} className={classes.root}>\r\n                {(foundUsers.length ? foundUsers : results).map((el) => {\r\n                    return <Grid item>\r\n                        <BackDropUserAndWrapCard name={el.name.first}\r\n                                                 email={el.email}\r\n                                                 phone={el.phone}\r\n                                                 src={el.picture.large}\r\n                                                 locationStreet={el.location.street.name}\r\n                                                 gender={el.gender}\r\n                                                 login={el.login.username}\r\n                        />\r\n                    </Grid>\r\n                })}\r\n            </Grid>\r\n        </div>\r\n    );\r\n}","import axios from 'axios'\r\nimport {allUsersType} from \"./persons-reducer\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://randomuser.me/api/',\r\n});\r\n\r\nexport const usersAPI = {\r\n    getUsers(quantity: number = 10) {\r\n        return instance.get<allUsersType>(`?results=${quantity}`).then(res => res.data)\r\n    },\r\n}","import {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {usersAPI} from \"./api\";\r\n\r\nconst initialState = {\r\n    results: [] as userType[],\r\n    info: {} as infoType,\r\n    foundUsers: [] as userType[],\r\n    numberPeople: 10 as number,\r\n    loading: false as boolean\r\n}\r\n\r\n// thunks\r\nexport const setUsersTC = createAsyncThunk('people/setUsersTC', (quantity: number, thunkAPI) => {\r\n    thunkAPI.dispatch(setLoading({status: true}))\r\n    return usersAPI.getUsers(quantity).then((data) => {\r\n        thunkAPI.dispatch(setLoading({status: false}))\r\n        return {result: data.results, info: data.info}\r\n    })\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: \"people\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setFoundUsers(state, action: PayloadAction<{ dataSearch: string }>) {\r\n            const data = action.payload.dataSearch.toLowerCase()\r\n            state.foundUsers = state.results.filter((el) =>\r\n                el.name.first.toLowerCase() === data || el.email === data || el.phone === data\r\n            )\r\n        },\r\n        setNumberPeople(state, action: PayloadAction<{ number: number }>) {\r\n            state.numberPeople = action.payload.number\r\n        },\r\n        setLoading(state, action: PayloadAction<{ status: boolean }>) {\r\n            state.loading = action.payload.status\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(setUsersTC.fulfilled, (state, action) => {\r\n            state.results = action.payload.result\r\n            state.info = action.payload.info\r\n        })\r\n    }\r\n})\r\n\r\nexport const peopleReducer = slice.reducer\r\nexport const {setFoundUsers, setNumberPeople, setLoading} = slice.actions\r\n\r\n//types\r\nexport type allUsersType = {\r\n    results: userType[]\r\n    info: infoType\r\n}\r\ntype userType = {\r\n    gender: string,\r\n    name: {\r\n        title: string,\r\n        first: string,\r\n        last: string\r\n    },\r\n    location: {\r\n        street: {\r\n            number: number,\r\n            name: string\r\n        },\r\n        city: string,\r\n        state: string,\r\n        postcode: string,\r\n        coordinates: {\r\n            latitude: string,\r\n            longitude: string\r\n        },\r\n        timezone: {\r\n            offset: string,\r\n            description: string\r\n        }\r\n    },\r\n    email: string,\r\n    login: {\r\n        uuid: string,\r\n        username: string,\r\n        password: string,\r\n        salt: string,\r\n        md5: string,\r\n        sha1: string,\r\n        sha256: string\r\n    },\r\n    dob: {\r\n        date: string,\r\n        age: number\r\n    },\r\n    registered: {\r\n        date: string,\r\n        age: number\r\n    },\r\n    phone: string,\r\n    cell: string,\r\n    id: {\r\n        name: string,\r\n        value: string\r\n    },\r\n    picture: {\r\n        \"large\": string,\r\n        \"medium\": string,\r\n        \"thumbnail\": string\r\n    },\r\n    nat: string\r\n}\r\ntype infoType = {\r\n    seed: string,\r\n    results: number,\r\n    page: number,\r\n    version: string\r\n}","import React, {ChangeEvent} from 'react';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport {createStyles, fade, makeStyles, Theme} from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        searchAndGroup: {\r\n            position: 'relative',\r\n            borderRadius: theme.shape.borderRadius,\r\n            backgroundColor: fade(theme.palette.common.white, 0.15),\r\n            '&:hover': {\r\n                backgroundColor: fade(theme.palette.common.white, 0.25),\r\n            },\r\n            marginLeft: 0,\r\n            width: '100%',\r\n            [theme.breakpoints.up('sm')]: {\r\n                marginLeft: theme.spacing(1),\r\n                width: 'auto',\r\n            },\r\n        },\r\n        searchIconAndGroup: {\r\n            padding: theme.spacing(0, 2),\r\n            height: '100%',\r\n            position: 'absolute',\r\n            pointerEvents: 'none',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n        },\r\n        inputRoot: {\r\n            color: 'inherit',\r\n        },\r\n        inputInput: {\r\n            padding: theme.spacing(1, 1, 1, 0),\r\n            // vertical padding + font size from searchIcon\r\n            paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n            transition: theme.transitions.create('width'),\r\n            width: '100%',\r\n            [theme.breakpoints.up('sm')]: {\r\n                width: '12ch',\r\n                '&:focus': {\r\n                    width: '20ch',\r\n                },\r\n            },\r\n        },\r\n    }),\r\n);\r\n\r\nexport const InputSearchAndGroup = (props: InputSearchAndGroupType) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.searchAndGroup}>\r\n            <div className={classes.searchIconAndGroup}>\r\n                {props.iconComponent}\r\n            </div>\r\n            <InputBase\r\n                placeholder={props.placeholder}\r\n                classes={{\r\n                    root: classes.inputRoot,\r\n                    input: classes.inputInput,\r\n                }}\r\n                onChange={props.onChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n//type\r\ntype InputSearchAndGroupType = {\r\n    placeholder: string\r\n    onChange: (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => void\r\n    iconComponent: any\r\n}\r\n","import React, {ChangeEvent} from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setFoundUsers, setNumberPeople} from '../redux/persons-reducer';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport {InputSearchAndGroup} from '../common/HeaderInput';\r\nimport GroupOutlinedIcon from '@material-ui/icons/GroupOutlined';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n        title: {\r\n            flexGrow: 1,\r\n            display: 'none',\r\n            [theme.breakpoints.up('sm')]: {\r\n                display: 'block',\r\n            },\r\n        },\r\n    }),\r\n);\r\n\r\nexport function Header() {\r\n\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch()\r\n\r\n    const dataSearch = (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\r\n        dispatch(setFoundUsers({dataSearch: e.currentTarget.value}))\r\n    }\r\n    const numberPeople = (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\r\n        e.currentTarget.value\r\n            ? dispatch(setNumberPeople({number: +e.currentTarget.value}))\r\n            : dispatch(setNumberPeople({number: 10}))\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        edge=\"start\"\r\n                        className={classes.menuButton}\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                    >\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography className={classes.title} variant=\"h6\" noWrap>\r\n                        People\r\n                    </Typography>\r\n                    <InputSearchAndGroup placeholder={'Quantity…'} onChange={numberPeople} iconComponent={<GroupOutlinedIcon/>}/>\r\n                    <InputSearchAndGroup placeholder={'Search…'} onChange={dataSearch} iconComponent={<SearchIcon/>}/>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}","import React, {useEffect} from \"react\";\nimport {CardGrid} from \"./card/CardGrid\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {setUsersTC} from \"./redux/persons-reducer\";\nimport {Header} from \"./header/Header\";\nimport {RootStoreSelector} from \"./redux/persons-selectors\";\n\nfunction App() {\n\n    const {numberPeople} = useSelector(RootStoreSelector)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(setUsersTC(numberPeople))\n    }, [dispatch, numberPeople])\n\n    return <div>\n        <Header/>\n        <CardGrid/>\n    </div>\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {configureStore} from \"@reduxjs/toolkit\";\r\nimport {peopleReducer} from \"./persons-reducer\";\r\n\r\n\r\nexport const store = configureStore({\r\n    reducer: peopleReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware()\r\n})\r\n\r\nexport type RootStore = ReturnType<typeof peopleReducer>","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}